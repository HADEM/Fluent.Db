# This is a basic workflow to help you get started with Actions

name: FluentDb - Build Workflow

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Setup environment
      - name: Setup .NET Core Environment
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.301
      - name: Install Dependencies
        run: dotnet restore
        
      # Build FluentDb Solutions
      - name: Build
        run: dotnet build FluentDb_Full.sln --configuration Release --no-restore
        
      # Run C# Code Analyzer
      - name: Get All Changed Files
        id: files
        uses: jitterbit/get-changed-files@v1
      - name: Run C# Code Analyzer      
        uses: microsoft/CSharpCodeAnalyzer@v0.1
        id: runcsharpcodeanalyzer
        with:
          report-on-files: ${{ steps.files.outputs.all }}
        
      - name: C# Code Analyzer analysis results
        run: echo "${{ steps.runcsharpcodeanalyzer.outputs.results }}"
        
      # Install docker and run fluentDb docker image for unit/integration testing
      - name: Setup FluentDb Docker container
        run: docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=!#123Pwd@!" -p 1402:1433 --name fluentDb -h fluentDb -d hadem/fluentdb-mssql-linux:fluentDbMsSqlLinux

      # Execute Unit/Integration test
      - name: Test
        run: dotnet test --no-restore --verbosity normal
      
